// fonction pour envoyer la requête SOAP
async function sendRequest() {
    // Récupération des valeurs des champs de formulaire
    const getValue = (id) => document.getElementById(id).value;
    const color1 = getValue('color1');
    const color2 = getValue('color2');
    const width = getValue('width');
    const height = getValue('height');
    const width2 = getValue('width2');
    const collection = getValue('collection');
    var model = getValue('model'); // car le modèle peut être modifié selon l'aspect
    const pose = getValue('pose');
    const sens_ouverture = getValue('sens_ouverture');
    const poteau_gauche = getValue('poteau_gauche');
    const poteau_droit = getValue('poteau_droit');
    const serrure = getValue('serrure');
    const ferrage = getValue('ferrage');
    const poignee = getValue('poignee');
    const decor = getValue('decor');
    const gammeDecor = getValue('gammeDecor');
    const numeroRue = getValue('numero');
    const aspect = getValue('aspect');

    // Déterminer le sens
    const sens = sens_ouverture.includes("gauche") ? "1" : "0";

    // Vérifier si le modèle est un modèle bicolor
    const isBicolor = specs.bicolor_fillings.includes(model);

    // Trouver les vantaux correspondant au modèle (enlever le suffixe "-M" si présent)
    const vantaux = specs.vantaux.filter(v => v.model === model.replace("-M", ""));

    // Trouver le nombre de panneaux
    const nombre_panneaux = Math.max(...vantaux.map(v => v.leaf_id));

    var transomXml = ''; // Initialiser le XML pour le poteau intermédiaire

    // Logique pour ajuster le modèle en fonction de l'aspect et de la largeur
    if (aspect === "1" && width > 4000) {
        if (!model.endsWith("-M")) {
            model = model + "-M"; // Ajouter le suffixe "-M" pour le modèle avec traverse
        }
    }

    if (aspect === "2") {
        if (!model.endsWith("-M")) {
            model = model + "-M"; // Ajouter le suffixe "-M" pour le modèle avec traverse
        }
        transomXml = `              <TRANSOM transom_id="1" leaf_id="1" filling_id="1" pos="W / 2" code="ALU ASPECT 2VTX" info="" masonry="1" />`;
    }

    // Fonction pour construire le XML des vantaux (SASH)
    const buildSashXml = () => {
        let sashXml = `<SASH id="1" leaves="${nombre_panneaux}" leaf_orientation="H" door="0" fixe="0" doorfixe="0">\n
                    <ASYMETRIC_LEAVES_0>${width2}</ASYMETRIC_LEAVES_0>\n
                    <FITTING_OPTION code="QQ_serrure" value="${serrure}" />\n
                    <FITTING_OPTION code="QQ_poignee" value="${poignee}" />\n
                    <SASH_OPTION code="QQ_ferrage" value="${ferrage}" />\n
                    <DIRECTION>${sens}</DIRECTION>\n\n`;

        // Si ce n'est pas un portillon (model contient "110"), remplir les 2 vantaux
        if (!model.includes("110")) {
            vantaux.forEach(vant => {
                sashXml += `                    <FILLING leaf_id="${vant.leaf_id}" filling_id="${vant.filling_id}">\n
                                    <FILLING_INNER_COLOUR info="">${color2}</FILLING_INNER_COLOUR>\n
                        </FILLING>\n\n`;
            });
        } else {
            sashXml += `                    <FILLING leaf_id="1" filling_id="2">\n
                                    <FILLING_INNER_COLOUR info="">${color2}</FILLING_INNER_COLOUR>\n
                        </FILLING>\n\n`;
        }

        sashXml += transomXml; // Ajouter le poteau intermédiaire si nécessaire
        sashXml += `                    </SASH>\n`;
        return sashXml;
    };

    // Logique spécifique selon le modèle (non portillon ou portillon)
    let shapeXml = '';

    // Si le modèle n'est pas un portillon
    if (!model.includes("110")) {
        if (model.endsWith("-B") || model.endsWith("-BB") || model.endsWith("-BH") || model.endsWith("-CDG") || model.endsWith("-CDGI")) {
            console.log("Ajustement des dimensions pour le modèle:", model);

            // Calculs pour différents types de modèles
            if (model.endsWith("-BH") || model.endsWith("-BB")) {
                var C = width / 2;
                var D = C * Math.tan(7 * Math.PI / 180);
                var E = C * Math.tan(7 * Math.PI / 180);
                shapeXml = `<SHAPE id="16" c="${C}" d="${D}" e="${E}" />`;
            } else if (model.endsWith("-B")) {
                var C = 7514 * (1 - Math.sqrt(1 - (width ** 2 / (4 * 7514 ** 2))));
                shapeXml = `<SHAPE id="8" c="${C}" />`;
            } else if (model.endsWith("-CDG") || model.endsWith("-CDGI")) {
                var C = 200;
                var E = 1686;
                var F = 1804;
                var D = (width - 2329) / 4 + 15;
                shapeXml = `<SHAPE id="42" c="${C}" d="${D}" e="${E}" f="${F}" />`;
            }

        }
    } else { // Si le modèle est un portillon
        if (model.includes("-B") || model.includes("-CDG") || model.includes("-CDGI")) {
            console.log("Ajustement des dimensions pour le modèle:", model);

            if (model.includes("-B")) {
                var C = 7514;
                var E = height - C;
                shapeXml = `<SHAPE id="5" c="${C}" e="${E}" />`;
            } else if (model.includes("-CDG") || model.includes("-CDGI")) {
                var C = 200;
                var E = 1686;
                var F = 1804;
                var D = (width - 2329) / 4 + 15;
                shapeXml = `<SHAPE id="42" c="${C}" d="${D}" e="${E}" f="${F}" />`;
            }
        }
    }

    // Ajustement pour le sens d'ouverture
    if (sens_ouverture === "QO_sensouv_gaucheP") {
        shapeXml = shapeXml.replace('c=', 'd="' + width + '" c=');
    } else if (sens_ouverture === "QO_sensouv_droiteP") { 
        shapeXml = shapeXml.replace('c=', 'd="0" c=');
    }

    // Construire le XML pour les profils périphériques
    let peripheralProfileXml = '';
    if (gammeDecor !== "QP_GamDecor_Sans") {
        peripheralProfileXml = `
                    <PERIPHERAL_PROFILES>
                        <PERIPHERAL_PROFILE code="DECORS">
                            <PERIPHERAL_PROFILE_OPTION code="QP_GamDecor" value="${gammeDecor}" />
                            <PERIPHERAL_PROFILE_OPTION code="QP_ModDecor" value="${decor}" />
                            <PERIPHERAL_PROFILE_OPTION code="QP_NumRue" value="${numeroRue}" />
                        </PERIPHERAL_PROFILE>
                    </PERIPHERAL_PROFILES>
        `;
    }

    // Construire le XML pour la requête
    const buildRequestXml = (sashXml) => {
        return `
        <REQUEST_TO_WINPRO>
            <REQUEST_TYPE>0</REQUEST_TYPE>
            <LIBRARY>${collection}</LIBRARY>
            <ITEM>${model}</ITEM>
            <IMAGE type="svg" view="reverse" />
            <DIMENSION_LINES>0</DIMENSION_LINES>
            <CONFIGS>
                <CONFIG>
                    <WIDTH>${width}</WIDTH>
                    <HEIGHT>${height}</HEIGHT>
                    ${shapeXml}
                    <COLOUR>${color1}</COLOUR>\n
                    ${isBicolor ? `<FILLING_INNER_COLOUR info="">${color2}</FILLING_INNER_COLOUR>\n` : ''}
                    ${sashXml}
                    ${peripheralProfileXml}                    
                    <OPTION code="QD_ControleCoheL" value="QD_ControleCoheL_non" />
                    <OPTION code="QD_typepose" value="${pose}" />
                    <OPTION code="QD_sensouv" value="${sens_ouverture}" />
                    <OPTION code="QD_poteauG" value="${poteau_gauche}" />
                    <OPTION code="QD_poteauD" value="${poteau_droit}" />
                </CONFIG>
            </CONFIGS>
        </REQUEST_TO_WINPRO>
        `;
    }